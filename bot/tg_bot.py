from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, func
from models import Recipe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine("sqlite:///recipes2.db")  # –ø—É—Ç—å –∫ –ë–î
Session = sessionmaker(bind=engine)

TOKEN = "7406510570:AAFpUQlrny-vVTtTnkI2o8uBQdRXtiMBako"  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 50

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    keyboard = [
        ["üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"],
        ["üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"],
        ["üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"],
        ["üßÇ –§–∏–ª—å—Ç—Ä –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É"],
        ["üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ ID"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_keyboard()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    session = Session()

    if user_input == "üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤":
        context.user_data["page"] = 0  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await list_recipes(update, context)
    elif user_input == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç":
        await random_recipe(update, context)
    elif user_input == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        context.user_data["awaiting"] = "search"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=get_keyboard())
    elif user_input == "üßÇ –§–∏–ª—å—Ç—Ä –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É":
        context.user_data["awaiting"] = "filter"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:", reply_markup=get_keyboard())
    elif user_input == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ ID":
        context.user_data["awaiting"] = "instructions"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=get_keyboard())
    elif user_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        context.user_data["page"] -= 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await list_recipes(update, context)
    elif user_input == "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è":
        context.user_data["page"] += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await list_recipes(update, context)
    elif user_input == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        action = context.user_data.get("awaiting")
        if action == "search":
            recipes = session.query(Recipe).filter(Recipe.name.ilike(f"%{user_input}%")).all()
            if recipes:
                result = "\n".join(f"{r.id}. {r.name}" for r in recipes)
                await update.message.reply_text("üîç –ù–∞–π–¥–µ–Ω–æ:\n" + result, reply_markup=get_keyboard())
            else:
                await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_keyboard())
        elif action == "filter":
            recipes = session.query(Recipe).filter(Recipe.ingredients.ilike(f"%{user_input}%")).all()
            if recipes:
                result = "\n".join(f"{r.id}. {r.name}" for r in recipes)
                await update.message.reply_text(f"ü•£ –° ¬´{user_input}¬ª:\n" + result, reply_markup=get_keyboard())
            else:
                await update.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=get_keyboard())
        elif action == "instructions":
            try:
                recipe = session.query(Recipe).get(int(user_input))
                if recipe:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    if recipe.img_url:
                        caption = f"üìñ {recipe.name}:\n{recipe.description or ''}"
                        await update.message.reply_photo(photo=recipe.img_url, caption=caption, parse_mode="Markdown", reply_markup=get_keyboard())

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    ingredients_and_instructions = f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{recipe.ingredients}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{recipe.instructions}"
                    await update.message.reply_text(ingredients_and_instructions, parse_mode="Markdown", reply_markup=get_keyboard())
                else:
                    await update.message.reply_text("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_keyboard())
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.", reply_markup=get_keyboard())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /start.", reply_markup=get_keyboard())

        context.user_data["awaiting"] = None

    session.close()

# –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async def list_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    page = context.user_data.get("page", 0)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    recipes = session.query(Recipe).offset(page * ITEMS_PER_PAGE).limit(ITEMS_PER_PAGE).all()

    if recipes:
        text = "üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n" + "\n".join(f"{r.id}. {r.name}" for r in recipes)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = []
        if page > 0:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
            keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
        if len(recipes) == ITEMS_PER_PAGE:  # –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –µ—â–µ —Ä–µ—Ü–µ–ø—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥"
            keyboard.append(["–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è"])
        keyboard.append(["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=get_keyboard())
    session.close()

# –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
async def random_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    recipe = session.query(Recipe).order_by(func.random()).first()
    if recipe:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if recipe.img_url:
            caption = f"üìñ {recipe.name}:\n{recipe.description or ''}"
            await update.message.reply_photo(photo=recipe.img_url, caption=caption, parse_mode="Markdown", reply_markup=get_keyboard())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        ingredients_and_instructions = f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{recipe.ingredients}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{recipe.instructions}"
        await update.message.reply_text(ingredients_and_instructions, parse_mode="Markdown", reply_markup=get_keyboard())
    else:
        await update.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=get_keyboard())
    session.close()

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()  # ‚úÖ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    main()
